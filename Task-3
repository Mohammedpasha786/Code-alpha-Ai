1: Set Up Your EnvironmentEnsure you have Python installed. You'll need libraries like TensorFlow/Keras for building the neural network, music21 for handling MIDI files, and numpy for numerical operations.
pip install tensorflow 
music21 numpy

2: Prepare the Dataset
For music generation, you need a dataset of MIDI files. You can find public domain MIDI files from various online repositories.

3: Preprocess the Data
Preprocessing involves converting MIDI files into a format suitable for training an LSTM.

import glob
import numpy as np
from music21 import converter, instrument, note, chord, stream

def get_notes():
    notes = []
    for file in glob.glob("midi_songs/*.mid"):
        midi = converter.parse(file)
        parts = instrument.partitionByInstrument(midi)
        if parts:  # file has instrument parts
            notes_to_parse = parts.parts[0].recurse() 
        else:  # file has notes in a flat structure
            notes_to_parse = midi.flat.notes
        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))
    return notes
notes = get_notes()

# Get all pitch names
pitches = sorted(set(item for item in notes))

# Create a dictionary to map pitches to integers
note_to_int = {note: number for number, note in enumerate(pitches)}

# Prepare the sequences used by the Neural Network
sequence_length = 100
network_input = []
network_output = []

for i in range(0, len(notes) - sequence_length):
    sequence_in = notes[i:i + sequence_length]
    sequence_out = notes[i + sequence_length]
    network_input.append([note_to_int[char] for char in sequence_in])
    network_output.append(note_to_int[sequence_out])

n_patterns = len(network_input)

# Reshape the input into a format compatible with LSTM layers
network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
network_input = network_input / float(len(pitches))

# One-hot encode the output notes
network_output = np_utils.to_categorical(network_output)

4: Create the ModelBuild an LSTM model to generate music sequences.
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
from tensorflow.keras.utils import np_utils

def create_model(network_input, n_vocab):
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        return_sequences=True
    ))
    model.add(Dropout(0.3))
    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512))
    model.add(Dense(256))
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam')
    return model

model = create_model(network_input, len(pitches))

5: Train the ModelTrain the model on your dataset.
model.fit(network_input, network_output, epochs=200, batch_size=64)
model.save('music_model.h5')

6: Generate MusicUse the trained model to generate new music sequences.import random

def generate_notes(model, network_input, pitches, note_to_int, int_to_note, num_notes=500):
    start = np.random.randint(0, len(network_input)-1)
    pattern = network_input[start]
    prediction_output = []
    
    for note_index in range(num_notes):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(len(pitches))
        prediction = model.predict(prediction_input, verbose=0)
        index = np.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)
        pattern = np.append(pattern, index)
        pattern = pattern[1:len(pattern)]
    
    return prediction_output

# Mapping from integers back to pitches
int_to_note = {number: note for note, number in note_to_int.items()}

# Generate notes
generated_notes = generate_notes(model, network_input, pitches, note_to_int, int_to_note)

# Convert the output into a MIDI file
def create_midi(prediction_output):
    offset = 0
    output_notes = []
    
    for pattern in prediction_output:
        if '.' in pattern or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='output.mid')

create_midi(generated_notes)

7: Running the Music Generation System 
1.Save the above scripts into files, for example, music_generation.py.
2.Ensure your dataset of MIDI files is in a folder named midi_songs.
3.Run the script:python music_generation.py

After training, the generated music will be saved as a MIDI file (output.mid) which you can play using any MIDI player.This is a basic example of music generation using LSTMs. For more sophisticated models, consider exploring other neural network architectures like GANs, or using more advanced preprocessing and data augmentation techniques.9

